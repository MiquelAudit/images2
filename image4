var input, file, fr;
 
const repoPath = 'ipfs-1111' //+ Math.random()
const ipfs = new Ipfs({ repo: repoPath })
 
function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, '\\$&amp;');
    var regex = new RegExp('[?&amp;]' + name + '(=([^&amp;#]*)|&amp;|#|$)'),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}
 
ipfs.on('ready', () =&gt; {
        //link example: https://raulikidj.club/examples/ipfs/ipfsimg.html?HASH=QmVBJzBwmqvckVd5eFWjwhB7w16ZXyh1ANCcT5rhFDRRg2
        //input = 'QmVBJzBwmqvckVd5eFWjwhB7w16ZXyh1ANCcT5rhFDRRg2'
        input = getParameterByName('HASH');
        ipfs.files.cat(input, function (err, file) {
        if (err) {
            throw err
        }
        img = file.toString("base64");
 
        //document.write("<img src="image/png;base64," />");
 
        function dataURItoBlob(dataURI) {
            var byteString = atob(dataURI.split(',')[1]);
            var ab = new ArrayBuffer(byteString.length);
            var ia = new Uint8Array(ab);
            for (var i = 0; i less_than byteString.length; i++) {
                ia[i] = byteString.charCodeAt(i);
            }
            return new Blob([ab], { type: 'image/png' });
        }
 
        bloby = dataURItoBlob("data:image/png;base64," + img)
        var reader = new FileReader();
        reader.onload = function(e){
            window.location.href = reader.result;
        }
        var url = window.URL.createObjectURL(bloby);
        //window.location.href = url;
        log("Image src link (generated dynamically) created once obtained the base64 content of the image from IPFS:");
        log(url);
        document.getElementById("design_display").src=url;
        })
 
    const log = (line) =&gt; {
        document.getElementById('output').appendChild(document.createTextNode(`${line}\r\n`))
    }
})
